Windows: значение приоритетов возрастающая (0-31) 
Windows, приоритеты процесса 
-	фоновые процессы;
-	процессы с нормальным приоритетом;
-	процессы с высоким приоритетом;
-	процессы реального времени.

CPU_ZERO() очищает набор.
CPU_ZERO инициализирует объект
sched_setaffinity, sched_getaffinity - устанавливает и получает процессорную маску соответствия для процесса  
int sched_getaffinity(pid_t pid, unsigned int len, unsigned long *mask);
Функция sched_getaffinity записывает на указатель, полученный от mask размер len маски соответствия процесса pid. 
Если pid равен нулю, то возвращается маска текущего процесса.
sched_getaffinity(pid)
int sched_setaffinity(pid_t pid, size_t size, const cpu_set_t *cpuset);
int sched_getaffinity(pid_t pid, size_t size, cpu_set_t *cpuset);
Эти два интерфейса используются в однопоточном коде. Аргумент pid определяет, привязку какого процесса следует установить или изменить. 
Естественно, для вызова необходимы соответствующие привилегии. 
Второй и третий параметры определяют битовую маску для ядер. 
Первая функция требует заполненную битовую маску для того, чтобы установить привязку. 
Вторая - заполняет битовую маску информацией о распределении (привязке) выбранного потока.
 Оба интерфейса объявлены в заголовочном файле <sched.h>.
Возвращает набор CPU процесса с PID pid (или текущий процесс, если ноль) ограничен.
Константа CPU_SETSIZE определяет максимальное количество процессоров, которое может быть представлено в структуре данных.
CPU_ISSET проверяет, входит ли процессор во множество, а CPU_COUNT возвращает текущее их количество во множестве.
Вызов sched_getaffinity() записывает в структуру cpu_set_t, на которую указывает mask, значение маски увязывания ЦП для нити, 
чей ID указан в pid. В аргументе cpusetsize задаётся размер mask (в байтах). 
Если значение pid равно нулю, то возвращается маска вызывающей нити.
Приоритет процесса определяется так называемым "значением nice", которое лежит в пределах от +20 (наименьший приоритет, 
процесс выполняется только тогда, когда ничто другое не занимает процессор), до -20 (наивысший приоритет).
 ОС Linux значение приоритета процесса варьируется в диапазоне значений от -20 до 19 (т.е. получается 40 возможных значений: -20, -19, -18 ... 0, 1, 2 ... 19) и называется niceness (сокращенно NI).

Чем меньше это значение, тем выше приоритет будет у такого процесса. Например, если у нас есть один процесс, работающий с приоритетом 10, а другой процесс работающий с приоритетом 15,
 то в первую очередь будет выполняться процесс приоритетом 10, 
а уже после него, тот, где приоритет 15. 
А в ситуации, когда есть 2 процесса и у одного из них приоритет будет равен -20, 
а у другого равен 10, то в первую очередь процессор будет обрабатывать тот процесс, 
у которого приоритет равен -20, а уже после тот, у которого приоритет равен 10.
Вызов fork() создаёт новый процесс посредством копирования вызывающего процесса. 
Описание функции: system () вызовет fork () для создания дочернего процесса. 
Дочерний процесс вызовет строку / bin / sh-c для выполнения команды, 
представленной строкой параметров. 
sh вызывает программу shкак интерпретатор, 
9. OS: Windows: значение приоритетов возрастающая (0-31) 
10. OS: Windows, приоритеты процесса 
-	фоновые процессы;
-	процессы с нормальным приоритетом;
-	процессы с высоким приоритетом;
-	процессы реального времени.
Маска соответствия - это битовая маска, указывающая, на каком процессоре (ах) поток или процесс должен быть запущен планировщиком 
операционной системы. Установка маски привязки для определенных процессов, запущенных под управлением Windows, может быть полезной,
 поскольку существует несколько системных процессов (особенно на контроллерах домена),
 которые ограничены первым процессором / ядром. Таким образом, исключение первого процессора может привести к повышению производительности 
приложения.
маска сродства - это битовая маска, указывающая, какой процессор (ы) является потоком или процесс должен запускаться планировщиком в операционной системе.
Параметр affinity mask, который существовал в предыдущих версиях SQL Server, динамически управляет соответствием ЦП.